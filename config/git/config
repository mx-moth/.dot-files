[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto
	all = auto

[color "diff"]
	whitespace = "red reverse"

[pretty]
	hist = %Cblue%h%Creset %ad %Cgreen%an%Creset %s%C(yellow)%d%Creset
	hist = %C(bold blue)%h%C(reset) %ai %C(245)(%ar)%C(reset) %C(green)%an%C(reset)%C(yellow)%d%C(reset)\n     %s

[alias]
	hist = !git log --graph --date=short --date-order --format=hist ${@:---all}
	sync = !git pull --rebase && git push
	wdiff = diff --color-words
	st = status -sb
	ff = merge --ff-only
	force-push = push --force-with-lease

	quick-amend = !VISUAL=/bin/true git commit --amend

	show-commit = "show --pretty=fuller --abbrev=40 --decorate"
	version-bump = "!f() {\
		set -e; \
		if [ $# -eq 0 ] ; then\
			if git config --get alias.get-version 1>/dev/null 2>&1 ; then\
				version=$( git get-version 2>/dev/null ); \
			else \
				echo 'Usage: git version-bump <version>';\
				exit 1;\
			fi ; \
		else \
			version=\"$1\"; \
		fi ; \
		message_format=$( git config --get 'code.version-bump-format' || echo 'Version bump to %s' ); \
		version_format=$( git config --get 'code.version-tag-format'  || echo '%s' ); \
		message=$( printf \"$message_format\" \"$version\" ); \
		version=$( printf \"$version_format\" \"$version\" ); \
		git commit -m \"$message\"; \
		git tag \"$version\"; \
	}; f"
	ignore-contents = "!f() { while [ $# -ne 0 ] ; do (echo '*' ; echo '!.gitignore') > $1/.gitignore ; shift ; done }; f"
	graphiv = "!f() { echo 'digraph git { node [fontsize = 10.0, shape = box];' ; git log --pretty='format:  %H -> { %P }' \"$@\" | sed 's/[0-9a-f]\\{40\\}/\"&\"/g' ; git log --pretty='format:  \"%H\" [ label = \"%h - %an - %ar\\n%f\" ]' \"$@\" ; echo '}'; }; f"
	merge-to = "!f() { local DEST=$1 ; shift ; local CURRENT=`git rev-parse --abbrev-ref HEAD` && git checkout "$DEST" && git merge "$CURRENT" $@ && git checkout "$CURRENT"; unset CURRENT; }; f"
	with = "!f() { local CURRENT=`git rev-parse --abbrev-ref HEAD` && git checkout $@  && bash && git checkout $CURRENT; }; f"
	fuck-it = "! git add -A ; git commit -em 'fuck it, commit everything'"
	add-pr = "!f() { local pr=$1 ; local remote=${2:-origin} ; git config --add remote.$remote.fetch +refs/pull/$pr/head:refs/remotes/$remote/pull/$pr ; }; f"
	# Prune all local branches that have been merged with origin/HEAD
	prune-remote-branches = "!f() { remote=${1:-origin} ; git fetch origin --prune ; }; f"
	prune-local-branches = "!f() {\
		remote=\"${1:-origin}\" ;\
		head_branch=\"$( git remote show \"$remote\" | sed -n '/HEAD branch/s/.*: //p' )\" ;\
		remote_head=\"$remote/$head_branch\" ;\
		git branch --merged \"${remote_head}\" --no-contains \"${remote_head}\" \
			| cut -c '3-' \
			| xargs -r -- git branch -d ;\
	}; f"
	prune-branches = "!f() { git prune-remote-branches ; git prune-local-branches ; }; f"

	# From https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit:w
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

[merge]
	log = true
[core]
	excludesfile = ~/.config/git/global_ignore

[rebase]
	autosquash = on
[pager]
	status = true
[push]
	default = current
[pull]
	ff = only
[include]
	path = ~/.config/git/config.local  # Put your credentials in here
[init]
	defaultBranch = main
